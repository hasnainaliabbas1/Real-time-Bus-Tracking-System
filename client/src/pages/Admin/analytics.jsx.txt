import { useState } from "react";
import { Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { 
  Gauge, 
  Users, 
  Bus, 
  Route as RouteIcon, 
  Calendar, 
  AlertTriangle, 
  BarChart as BarChartIcon, 
  Download,
  FileText,
  TrendingUp,
  Clock,
  UserCheck,
  Ticket,
  CreditCard,
  LogOut,
  Loader2
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import { format, subDays } from "date-fns";

// Color constants for charts
const COLORS = ['var(--chart-1)', 'var(--chart-2)', 'var(--chart-3)', 'var(--chart-4)', 'var(--chart-5)'];

export default function Analytics() {
  const { user, logoutMutation } = useAuth();
  const [dateRange, setDateRange] = useState("7");
  const [chartType, setChartType] = useState("daily_passengers");

  // Fetch analytics data
  const { data: analytics, isLoading: isLoadingAnalytics } = useQuery({
    queryKey: ["/api/analytics"],
  });

  // Generate dates for passenger count chart
  const generateDateLabels = (days) => {
    return Array.from({ length: days }, (_, i) => {
      const date = subDays(new Date(), days - 1 - i);
      return format(date, 'MMM dd');
    });
  };

  // Prepare chart data
  const getChartData = () => {
    if (!analytics) return [];

    const dates = generateDateLabels(parseInt(dateRange));
    
    switch (chartType) {
      case "daily_passengers": return analytics.passengerCounts || dates.map((date, index) => ({
          date,
          count: Math.floor(Math.random() * 200) + 50 // Fallback random data
        }));
      case "on_time_performance": return [
          { name: 'On Time', value: analytics.onTimePerformance?.onTime || 80 },
          { name: 'Delayed', value: analytics.onTimePerformance?.delayed || 20 },
        ];
      case "subscription_trends": return analytics.subscriptionTrends || [
          { name: 'Daily Pass', count: 75 },
          { name: 'Weekly Pass', count: 50 },
          { name: 'Monthly Pass', count: 25 },
        ];
      default: return [];
    }
  };

  // Generate report file
  const handleDownloadReport = () => {
    // In a real implementation, this would generate and download a report
    const reportContent = `BusTrack Analytics Report
Generated on ${format(new Date(), 'MMMM d, yyyy')}

Active Buses: ${analytics?.counts.activeBuses || 0}
Delayed Buses: ${analytics?.counts.delayedBuses || 0}
Active Tickets: ${analytics?.counts.activeTickets || 0}
Active Drivers: ${analytics?.counts.activeDrivers || 0}

Passenger Counts:
${analytics?.passengerCounts?.map((item) => `${item.date}: ${item.count} passengers`).join('\n') || 'No data available'}

On-Time Performance Time: ${analytics?.onTimePerformance?.onTime || 0}%
Delayed: ${analytics?.onTimePerformance?.delayed || 0}%

Subscription Trends:
${analytics?.subscriptionTrends?.map((item) => `${item.name}: ${item.count} subscriptions`).join('\n') || 'No data available'}
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `bustrack-analytics-${format(new Date(), 'yyyyMMdd')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="flex min-h-screen">
      {/* Sidebar */}
      <div className="bg-sidebar w-64 flex-shrink-0 hidden md:block">
        <div className="p-4 border-b border-sidebar-border">
          <h1 className="text-xl font-bold text-sidebar-foreground">BusTrack Admin</h1>
        </div>
        <nav className="mt-5 px-2">
          <Link href="/admin">
            <a className="group flex items-center px-2 py-2 text-base font-medium rounded-md text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground">
              <Gauge className="mr-3 h-5 w-5" />
              Dashboard
            </a>
          </Link>
          <Link href="/admin/buses">
            <a className="group flex items-center px-2 py-2 text-base font-medium rounded-md text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground mt-2">
              <Bus className="mr-3 h-5 w-5" />
              Buses
            </a>
          </Link>
          <Link href="/admin/schedule">
            <a className="group flex items-center px-2 py-2 text-base font-medium rounded-md text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground mt-2">
              <Calendar className="mr-3 h-5 w-5" />
              Schedule
            </a>
          </Link>
          <Link href="/admin/incidents">
            <a className="group flex items-center px-2 py-2 text-base font-medium rounded-md text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground mt-2">
              <AlertTriangle className="mr-3 h-5 w-5" />
              Incidents
            </a>
          </Link>
          <Link href="/admin/analytics">
            <a className="group flex items-center px-2 py-2 text-base font-medium rounded-md bg-sidebar-accent text-sidebar-accent-foreground mt-2">
              <BarChartIcon className="mr-3 h-5 w-5" />
              Analytics
            </a>
          </Link>
          <Separator className="my-4 bg-sidebar-border" />
          <Button 
            variant="ghost" 
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground"
            onClick={() => logoutMutation.mutate()}
          >
            <LogOut className="mr-3 h-5 w-5" />
            Sign Out
          </Button>
        </nav>
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top header */}
        <header className="bg-white shadow">
          <div className="px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-800">Analytics & Reporting</h2>
            <div className="flex items-center">
              <span className="text-sm text-gray-600 mr-4">
                {user?.fullName || user?.username}
              </span>
            </div>
          </div>
        </header>

        {/* Main content */}
        <main className="flex-1 overflow-y-auto bg-gray-100 p-6">
          {/* Analytics Overview */}
          <div className="mb-6 grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-gray-500">Daily Passengers</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {isLoadingAnalytics ? (
                    <Loader2 className="h-5 w-5 animate-spin" />
                  ) : (
                    analytics?.passengerCounts?.[analytics.passengerCounts.length - 1]?.count || 0
                  )}
                </div>
                <p className="text-xs text-green-500 flex items-center">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  +5.25% from yesterday
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-gray-500">On-Time Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-1">
                  <p className="text-2xl font-bold">
                    {isLoadingAnalytics ? (
                      <Loader2 className="h-5 w-5 animate-spin" />
                    ) : (
                      `${analytics?.onTimePerformance?.onTime || 0}%`
                    )}
                  </p>
                  <p className="text-xs text-amber-500 flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    {analytics?.onTimePerformance?.delayed || 0}% buses delayed
                  </p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-gray-500">Active Drivers</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {isLoadingAnalytics ? (
                    <Loader2 className="h-5 w-5 animate-spin" />
                  ) : (
                    analytics?.counts.activeDrivers || 0
                  )}
                </div>
                <p className="text-xs text-blue-500 flex items-center">
                  <UserCheck className="h-3 w-3 mr-1" />
                  {analytics?.counts.totalDrivers || 0} total drivers
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-gray-500">Revenue Today</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {isLoadingAnalytics ? (
                    <Loader2 className="h-5 w-5 animate-spin" />
                  ) : (
                    `$${analytics?.revenue?.today || 0}`
                  )}
                </div>
                <p className="text-xs text-green-500 flex items-center">
                  <CreditCard className="h-3 w-3 mr-1" />
                  {analytics?.revenue?.transactions || 0} transactions
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Chart Controls */}
          <div className="mb-6 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Select value={chartType} onValueChange={setChartType}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select chart type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="daily_passengers">Daily Passengers</SelectItem>
                  <SelectItem value="on_time_performance">On-Time Performance</SelectItem>
                  <SelectItem value="subscription_trends">Subscription Trends</SelectItem>
                </SelectContent>
              </Select>
              <Select value={dateRange} onValueChange={setDateRange}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select date range" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7">Last 7 days</SelectItem>
                  <SelectItem value="14">Last 14 days</SelectItem>
                  <SelectItem value="30">Last 30 days</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <Button onClick={handleDownloadReport}>
              <Download className="mr-2 h-4 w-4" />
              Download Report
            </Button>
          </div>

          {/* Chart */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Analytics Chart</CardTitle>
              <CardDescription>
                {chartType === "daily_passengers" && "Passenger count over time"}
                {chartType === "on_time_performance" && "Bus on-time performance distribution"}
                {chartType === "subscription_trends" && "Subscription type distribution"}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px] w-full">
                {isLoadingAnalytics ? (
                  <div className="h-full flex items-center justify-center">
                    <Loader2 className="h-8 w-8 animate-spin" />
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height="100%">
                    {chartType === "daily_passengers" ? (
                      <LineChart data={getChartData()}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Line type="monotone" dataKey="count" stroke="var(--primary)" strokeWidth={2} />
                      </LineChart>
                    ) : chartType === "on_time_performance" ? (
                      <PieChart>
                        <Pie
                          data={getChartData()}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          outerRadius={150}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {getChartData().map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                        <Legend />
                      </PieChart>
                    ) : (
                      <BarChart data={getChartData()}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Bar dataKey="count" fill="var(--primary)">
                          {getChartData().map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Bar>
                      </BarChart>
                    )}
                  </ResponsiveContainer>
                )}
              </div>
            </CardContent>
          </Card>
        </main>
      </div>
    </div>
  );
}
