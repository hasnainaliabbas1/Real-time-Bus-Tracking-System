import { useState } from "react";
import { Link } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { 
  Gauge, 
  Users, 
  Bus, 
  Route as RouteIcon, 
  Calendar, 
  AlertTriangle, 
  BarChart, 
  Plus, 
  Pencil, 
  Trash2,
  LogOut,
  Search,
  FileEdit,
  Loader2
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  Card, 
  CardContent,
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  buses,
  insertBusSchema,
  routes,
  users,
  insertRouteSchema
} from "@shared/schema.ts";

// Bus form schema
const busFormSchema = z.object({
  busNumber: z.string().min(2, "Bus number must be at least 2 characters"),
  capacity: z.coerce.number().min(1, "Capacity must be at least 1"),
  status: z.enum(["active", "inactive", "maintenance"]),
  driverId: z.string().optional(),
  routeId: z.string().optional(),
});

// Default form values
const defaultBusValues = {
  busNumber: "",
  capacity: "",
  status: "active",
  driverId: "",
  routeId: "",
};

const defaultRouteValues = {
  name: "",
  description: "",
  status: "active",
};

// Route form schema
const routeFormSchema = z.object({
  name: z.string().min(3, "Route name must be at least 3 characters"),
  description: z.string().optional(),
  status: z.enum(["active", "inactive"]),
});

export default function BusManagement() {
  const { user, logoutMutation } = useAuth();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("buses");
  const [searchTerm, setSearchTerm] = useState("");
  const [editingBus, setEditingBus] = useState(null);
  const [editingRoute, setEditingRoute] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [deletingItem, setDeletingItem] = useState(null);

  // Fetch buses data
  const { data: busesData, isLoading: busesLoading } = useQuery({
    queryKey: ["/api/buses"],
  });

  // Fetch routes data
  const { data: routesData, isLoading: routesLoading } = useQuery({
    queryKey: ["/api/routes"],
  });

  // Fetch drivers
  const { data: driversData, isLoading: driversLoading } = useQuery({
    queryKey: ["/api/users"],
    select: (data) => data?.filter((user) => user.role === "driver"),
  });

  // Create/Update bus mutation
  const busFormMutation = useMutation({
    mutationFn: async (values) => {
      // Make sure we're sending valid driver and route IDs to MongoDB
      const busData = {
        ...values,
        driverId: values.driverId && values.driverId !== "none" ? values.driverId : null,
        routeId: values.routeId && values.routeId !== "none" ? values.routeId : null,
      };
      
      console.log("Bus data to be sent:", busData);
      
      let res;
      if (editingBus) {
        res = await apiRequest("PUT", `/api/buses/${editingBus._id || editingBus.id}`, busData);
      } else {
        res = await apiRequest("POST", "/api/buses", busData);
      }
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/buses"] });
      setEditingBus(null);
      toast({
        title: `Bus ${editingBus ? "updated" : "created"} successfully`,
        description: `The bus has been ${editingBus ? "updated" : "created"} successfully.`,
      });
    },
    onError: (error) => {
      toast({
        title: `Failed to ${editingBus ? "update" : "create"} bus`,
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Create/Update route mutation
  const routeFormMutation = useMutation({
    mutationFn: async (values) => {
      let res;
      if (editingRoute) {
        res = await apiRequest("PUT", `/api/routes/${editingRoute._id || editingRoute.id}`, values);
      } else {
        res = await apiRequest("POST", "/api/routes", values);
      }
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/routes"] });
      setEditingRoute(null);
      toast({
        title: `Route ${editingRoute ? "updated" : "created"} successfully`,
        description: `The route has been ${editingRoute ? "updated" : "created"} successfully.`,
      });
    },
    onError: (error) => {
      toast({
        title: `Failed to ${editingRoute ? "update" : "create"} route`,
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: async ({ id, type }) => {
      const res = await apiRequest("DELETE", `/api/${type === 'bus' ? 'buses' : 'routes'}/${id}`);
      return { id, type };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ 
        queryKey: [data.type === 'bus' ? "/api/buses" : "/api/routes"] 
      });
      setDeletingItem(null);
      setIsDeleteDialogOpen(false);
      toast({
        title: `${data.type === 'bus' ? 'Bus' : 'Route'} deleted successfully`,
        description: `The ${data.type === 'bus' ? 'bus' : 'route'} has been deleted successfully.`,
      });
    },
    onError: (error) => {
      toast({
        title: `Failed to delete ${deletingItem?.type}`,
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Initialize bus form
  const busForm = useForm({
    resolver: zodResolver(busFormSchema),
    defaultValues: defaultBusValues,
  });

  // Initialize route form
  const routeForm = useForm({
    resolver: zodResolver(routeFormSchema),
    defaultValues: defaultRouteValues,
  });

  // Filter buses based on search term
  const filteredBuses = busesData?.filter((bus) => 
    bus.busNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (bus.driver?.username && bus.driver?.username.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (bus.route?.name && bus.route?.name.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  // Filter routes based on search term
  const filteredRoutes = routesData?.filter((route) => 
    route.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (route.description && route.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleBusSubmit = (values) => {
    busFormMutation.mutate(values);
  };

  const handleRouteSubmit = (values) => {
    routeFormMutation.mutate(values);
  };

  const handleDelete = () => {
    if (deletingItem) {
      deleteMutation.mutate(deletingItem);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b">
        <div className="flex h-16 items-center px-4">
          <div className="flex items-center gap-4">
            <Link href="/admin/dashboard">
              <Gauge className="h-8 w-8" />
            </Link>
            <h1 className="text-xl font-semibold">Admin Dashboard</h1>
          </div>
          <nav className="ml-8 flex items-center gap-4">
            <Link href="/admin/users">
              <Users className="h-4 w-4" />
              Users
            </Link>
            <Link href="/admin/buses" className="font-semibold">
              <Bus className="h-4 w-4" />
              Buses
            </Link>
            <Link href="/admin/routes">
              <RouteIcon className="h-4 w-4" />
              Routes
            </Link>
            <Link href="/admin/schedules">
              <Calendar className="h-4 w-4" />
              Schedules
            </Link>
            <Link href="/admin/incidents">
              <AlertTriangle className="h-4 w-4" />
              Incidents
            </Link>
            <Link href="/admin/analytics">
              <BarChart className="h-4 w-4" />
              Analytics
            </Link>
          </nav>
          <div className="ml-auto flex items-center gap-4">
            <span className="text-sm text-muted-foreground">
              Welcome, {user?.name}
            </span>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => logoutMutation.mutate()}
            >
              <LogOut className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </header>

      <main className="p-8">
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-3xl font-bold tracking-tight">Fleet Management</h2>
          <div className="flex items-center gap-4">
            <div className="relative">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search..."
                className="pl-8"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button onClick={() => {
              setActiveTab("buses");
              setEditingBus(null);
              busForm.reset(defaultBusValues);
            }}>
              <Plus className="h-4 w-4 mr-2" />
              Add Bus
            </Button>
            <Button onClick={() => {
              setActiveTab("routes");
              setEditingRoute(null);
              routeForm.reset(defaultRouteValues);
            }}>
              <Plus className="h-4 w-4 mr-2" />
              Add Route
            </Button>
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList>
            <TabsTrigger value="buses">Buses</TabsTrigger>
            <TabsTrigger value="routes">Routes</TabsTrigger>
          </TabsList>
          <TabsContent value="buses">
            <Card>
              <CardHeader>
                <CardTitle>Buses</CardTitle>
                <CardDescription>
                  Manage your fleet of buses
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Form {...busForm}>
                    <form onSubmit={busForm.handleSubmit(handleBusSubmit)} className="space-y-4">
                      <FormField
                        control={busForm.control}
                        name="busNumber"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Bus Number</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={busForm.control}
                        name="capacity"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Capacity</FormLabel>
                            <FormControl>
                              <Input type="number" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={busForm.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="active">Active</SelectItem>
                                <SelectItem value="inactive">Inactive</SelectItem>
                                <SelectItem value="maintenance">Maintenance</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={busForm.control}
                        name="driverId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Driver</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select driver" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="none">No Driver</SelectItem>
                                {driversData?.map((driver) => (
                                  <SelectItem key={driver._id} value={driver._id}>
                                    {driver.username}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={busForm.control}
                        name="routeId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Route</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select route" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="none">No Route</SelectItem>
                                {routesData?.map((route) => (
                                  <SelectItem key={route._id} value={route._id}>
                                    {route.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button type="submit" disabled={busFormMutation.isPending}>
                        {busFormMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        {editingBus ? "Update" : "Add"} Bus
                      </Button>
                    </form>
                  </Form>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="routes">
            <Card>
              <CardHeader>
                <CardTitle>Routes</CardTitle>
                <CardDescription>
                  Manage your bus routes
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Form {...routeForm}>
                    <form onSubmit={routeForm.handleSubmit(handleRouteSubmit)} className="space-y-4">
                      <FormField
                        control={routeForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Route Name</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={routeForm.control}
                        name="description"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Description</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={routeForm.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="active">Active</SelectItem>
                                <SelectItem value="inactive">Inactive</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button type="submit" disabled={routeFormMutation.isPending}>
                        {routeFormMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        {editingRoute ? "Update" : "Add"} Route
                      </Button>
                    </form>
                  </Form>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Confirm Delete</DialogTitle>
              <DialogDescription>
                Are you sure you want to delete this {deletingItem?.type}? This action cannot be undone.
              </DialogDescription>
            </DialogHeader>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
                Cancel
              </Button>
              <Button variant="destructive" onClick={handleDelete} disabled={deleteMutation.isPending}>
                {deleteMutation.isPending && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Delete
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </main>
    </div>
  );
}
