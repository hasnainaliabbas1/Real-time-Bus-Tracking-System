import React, { useState, useEffect } from "react";
import { Link } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { format } from "date-fns";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { QrCode, Wallet, AlertCircle, Loader2, ArrowLeft, Calendar, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";

// Form schema
const ticketFormSchema = z.object({
  routeId: z.string().min(1, "Route is required"),
  fromStopId: z.string().min(1, "Departure stop is required"),
  toStopId: z.string().min(1, "Arrival stop is required"),
  departureTime: z.string().min(1, "Departure time is required"),
  price: z.number().min(1, "Price is required"),
  travelDate: z.string().min(1, "Travel date is required"),
});

// Define the form values structure
const ticketFormDefaults = {
  routeId: "",
  fromStopId: "",
  toStopId: "",
  departureTime: new Date().toISOString().slice(0, 16),
  travelDate: new Date().toISOString().slice(0, 10), // YYYY-MM-DD format
  price: 5,
};

export default function TicketBooking() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [selectedRoute, setSelectedRoute] = useState("");
  const [showQRCode, setShowQRCode] = useState(false);
  const [newTicket, setNewTicket] = useState(null);
  const [currentTab, setCurrentTab] = useState("book");

  // Fetch routes
  const { data: routes, isLoading: isLoadingRoutes } = useQuery({
    queryKey: ["/api/routes"],
  });

  // Fetch tickets
  const { data: tickets, isLoading: isLoadingTickets } = useQuery({
    queryKey: ["/api/tickets"],
  });

  // Fetch stops for selected route
  const { 
    data: routeDetails, 
    isLoading: isLoadingRouteDetails 
  } = useQuery({
    queryKey: ["/api/routes", selectedRoute],
    enabled: !!selectedRoute
  });
  
  // Log route data for debugging
  useEffect(() => {
    if (routeDetails) {
      console.log("Route details loaded:", routeDetails);
      console.log("Route stops:", routeDetails.routeStops);
    }
  }, [routeDetails]);

  // Book ticket mutation
  const bookTicketMutation = useMutation({
    mutationFn: async (ticketData) => {
      const res = await apiRequest("POST", "/api/tickets", ticketData);
      return res.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["/api/tickets"] });
      setNewTicket(data);
      setShowQRCode(true);
      toast({
        title: "Ticket booked successfully",
        description: "Your ticket has been booked.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to book ticket",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Initialize form with non-empty strings for select fields
  const form = useForm({
    resolver: zodResolver(ticketFormSchema),
    defaultValues: ticketFormDefaults,
  });

  const onRouteChange = (routeId) => {
    setSelectedRoute(routeId);
    form.setValue("routeId", routeId);
    form.setValue("fromStopId", "");
    form.setValue("toStopId", "");
    form.setValue("departureTime", "");
    form.setValue("price", Math.floor(Math.random() * 10) + 5);
  };

  const onSubmit = (data) => {
    const ticketData = {
      ...data,
      routeId: data.routeId,
      fromStopId: data.fromStopId,
      toStopId: data.toStopId,
      departureTime: new Date(data.departureTime),
      travelDate: new Date(data.travelDate),
      status: "active",
    };

    bookTicketMutation.mutate(ticketData);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <Link href="/">
                <Button variant="ghost" size="icon">
                  <ArrowLeft className="h-5 w-5" />
                </Button>
              </Link>
              <h1 className="ml-2 text-xl font-semibold text-gray-900">Ticket Booking</h1>
            </div>
            <div className="text-sm text-gray-500">
              Welcome, {user?.fullName || user?.username}
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <Tabs defaultValue="book" value={currentTab} onValueChange={setCurrentTab}>
          <TabsList className="mb-6">
            <TabsTrigger value="book">Book Ticket</TabsTrigger>
            <TabsTrigger value="my-tickets">My Tickets</TabsTrigger>
          </TabsList>

          {/* Book Ticket Tab */}
          <TabsContent value="book">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle>Book a New Ticket</CardTitle>
                  <CardDescription>
                    Select your route, stops, and time to book a ticket.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                      <FormField
                        control={form.control}
                        name="routeId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Route</FormLabel>
                            <Select 
                              onValueChange={(value) => onRouteChange(value)} 
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select a route" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {isLoadingRoutes ? (
                                  <div className="flex items-center justify-center py-2">
                                    <Loader2 className="h-4 w-4 animate-spin" />
                                  </div>
                                ) : routes?.length > 0 ? (
                                  routes.map((route) => (
                                    <SelectItem 
                                      key={route._id || route.id} 
                                      value={(route._id || route.id).toString()}
                                    >
                                      {route.name}
                                    </SelectItem>
                                  ))
                                ) : (
                                  <SelectItem value="no_routes" disabled>
                                    No routes available
                                  </SelectItem>
                                )}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="fromStopId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>From</FormLabel>
                              <Select 
                                onValueChange={field.onChange} 
                                defaultValue={field.value}
                                disabled={!selectedRoute}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select departure stop" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {isLoadingRouteDetails ? (
                                    <div className="flex items-center justify-center py-2">
                                      <Loader2 className="h-4 w-4 animate-spin" />
                                    </div>
                                  ) : routeDetails?.routeStops?.length > 0 ? (
                                    routeDetails.routeStops.map((stop) => (
                                      <SelectItem 
                                        key={stop._id || stop.id} 
                                        value={(stop._id || stop.id).toString()}
                                      >
                                        {stop.name}
                                      </SelectItem>
                                    ))
                                  ) : (
                                    <SelectItem value="no_stops" disabled>
                                      No stops available
                                    </SelectItem>
                                  )}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="toStopId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>To</FormLabel>
                              <Select 
                                onValueChange={field.onChange} 
                                defaultValue={field.value}
                                disabled={!selectedRoute}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select arrival stop" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {isLoadingRouteDetails ? (
                                    <div className="flex items-center justify-center py-2">
                                      <Loader2 className="h-4 w-4 animate-spin" />
                                    </div>
                                  ) : routeDetails?.routeStops?.length > 0 ? (
                                    routeDetails.routeStops.map((stop) => (
                                      <SelectItem 
                                        key={stop._id || stop.id} 
                                        value={(stop._id || stop.id).toString()}
                                      >
                                        {stop.name}
                                      </SelectItem>
                                    ))
                                  ) : (
                                    <SelectItem value="no_stops" disabled>
                                      No stops available
                                    </SelectItem>
                                  )}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="travelDate"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Travel Date</FormLabel>
                              <FormControl>
                                <input
                                  type="date"
                                  className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="departureTime"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Departure Time</FormLabel>
                              <FormControl>
                                <input
                                  type="time"
                                  className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <Button 
                        type="submit" 
                        className="w-full"
                        disabled={bookTicketMutation.isPending}
                      >
                        {bookTicketMutation.isPending ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Booking...
                          </>
                        ) : (
                          "Book Ticket"
                        )}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Booking Summary</CardTitle>
                  <CardDescription>Your ticket details</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="text-sm font-medium text-gray-500">Route</div>
                      <div className="mt-1">
                        {routes?.find(r => r._id === form.getValues("routeId"))?.name || "Not selected"}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">From</div>
                      <div className="mt-1">
                        {routeDetails?.routeStops?.find(s => s._id === form.getValues("fromStopId"))?.name || "Not selected"}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">To</div>
                      <div className="mt-1">
                        {routeDetails?.routeStops?.find(s => s._id === form.getValues("toStopId"))?.name || "Not selected"}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Travel Date</div>
                      <div className="mt-1">
                        {form.getValues("travelDate") ? format(new Date(form.getValues("travelDate")), "MMMM d, yyyy") : "Not selected"}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Departure Time</div>
                      <div className="mt-1">
                        {form.getValues("departureTime") || "Not selected"}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-500">Price</div>
                      <div className="mt-1 text-lg font-semibold">
                        ${form.getValues("price")}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* My Tickets Tab */}
          <TabsContent value="my-tickets">
            <div className="space-y-6">
              {isLoadingTickets ? (
                <div className="flex justify-center py-12">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                </div>
              ) : tickets?.length > 0 ? (
                tickets.map((ticket) => (
                  <Card key={ticket._id || ticket.id}>
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle>{ticket.route?.name || "Unknown Route"}</CardTitle>
                          <CardDescription>
                            Ticket #{ticket._id || ticket.id}
                          </CardDescription>
                        </div>
                        <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                          ticket.status === "active" ? "bg-green-100 text-green-800" : 
                          ticket.status === "used" ? "bg-gray-100 text-gray-600" : 
                          "bg-red-100 text-red-800"
                        }`}>
                          {ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <div className="text-sm font-medium text-gray-500">From</div>
                            <div className="mt-1">{ticket.fromStop?.name || "Unknown"}</div>
                          </div>
                          <div>
                            <div className="text-sm font-medium text-gray-500">To</div>
                            <div className="mt-1">{ticket.toStop?.name || "Unknown"}</div>
                          </div>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <div className="text-sm font-medium text-gray-500">Travel Date</div>
                            <div className="mt-1">
                              {ticket.travelDate ? format(new Date(ticket.travelDate), "MMM d, yyyy") : "Unknown"}
                            </div>
                          </div>
                          <div>
                            <div className="text-sm font-medium text-gray-500">Departure Time</div>
                            <div className="mt-1">
                              {ticket.departureTime ? format(new Date(ticket.departureTime), "h:mm a") : "Unknown"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button 
                        className="w-full"
                        variant="outline"
                        onClick={() => {
                          setNewTicket(ticket);
                          setShowQRCode(true);
                        }}
                      >
                        <QrCode className="mr-2 h-4 w-4" />
                        View QR Code
                      </Button>
                    </CardFooter>
                  </Card>
                ))
              ) : (
                <div className="text-center py-12 bg-white rounded-lg shadow">
                  <Wallet className="mx-auto h-12 w-12 text-gray-300" />
                  <h3 className="mt-2 text-lg font-medium text-gray-900">No tickets found</h3>
                  <p className="mt-1 text-sm text-gray-500">You haven't booked any tickets yet.</p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </main>

      {/* QR Code Dialog */}
      <Dialog open={showQRCode} onOpenChange={setShowQRCode}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Ticket QR Code</DialogTitle>
            <DialogDescription>
              Show this QR code to the bus driver when boarding.
            </DialogDescription>
          </DialogHeader>
          <div className="flex flex-col items-center justify-center py-4">
            {newTicket && (
              <>
                <div className="bg-white p-4 rounded-lg shadow-lg">
                  <img
                    src={`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(
                      JSON.stringify({
                        ticketId: newTicket._id || newTicket.id,
                        routeId: newTicket.routeId,
                        fromStopId: newTicket.fromStopId,
                        toStopId: newTicket.toStopId,
                        travelDate: newTicket.travelDate,
                        departureTime: newTicket.departureTime,
                      })
                    )}`}
                    alt="Ticket QR Code"
                    className="w-48 h-48"
                  />
                </div>
                <div className="mt-4 text-center">
                  <p className="text-sm text-gray-500">
                    Valid for travel on {format(new Date(newTicket.travelDate), "MMMM d, yyyy")}
                  </p>
                  <p className="text-sm text-gray-500">
                    Departure: {format(new Date(newTicket.departureTime), "h:mm a")}
                  </p>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
